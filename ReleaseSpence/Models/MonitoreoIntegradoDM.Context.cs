//------------------------------------------------------------------------------
// <auto-generated>
//     Este código se generó a partir de una plantilla.
//
//     Los cambios manuales en este archivo pueden causar un comportamiento inesperado de la aplicación.
//     Los cambios manuales en este archivo se sobrescribirán si se regenera el código.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ReleaseSpence.Models
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class MonitoreoIntegradoEntities : DbContext
    {
        public MonitoreoIntegradoEntities()
            : base("name=MonitoreoIntegradoEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Datos_clima> Datos_clima { get; set; }
        public virtual DbSet<Datos_co2> Datos_co2 { get; set; }
        public virtual DbSet<Datos_energia> Datos_energia { get; set; }
        public virtual DbSet<Datos_extensometro> Datos_extensometro { get; set; }
        public virtual DbSet<Datos_o2> Datos_o2 { get; set; }
        public virtual DbSet<Datos_piezometro> Datos_piezometro { get; set; }
        public virtual DbSet<Datos_pm10> Datos_pm10 { get; set; }
        public virtual DbSet<Figuras> Figuras { get; set; }
        public virtual DbSet<Imagen_TipoSensor> Imagen_TipoSensor { get; set; }
        public virtual DbSet<Imagenes> Imagenes { get; set; }
        public virtual DbSet<Marcadores> Marcadores { get; set; }
        public virtual DbSet<Sensores> Sensores { get; set; }
        public virtual DbSet<Sensores_Piezometros> Sensores_Piezometros { get; set; }
        public virtual DbSet<TipoSensores> TipoSensores { get; set; }
        public virtual DbSet<Identity_Roles> Identity_Roles { get; set; }
        public virtual DbSet<Identity_UserClaims> Identity_UserClaims { get; set; }
        public virtual DbSet<Identity_UserLogins> Identity_UserLogins { get; set; }
        public virtual DbSet<Identity_Users> Identity_Users { get; set; }
        public virtual DbSet<Punto_de_Monitoreo> Punto_de_Monitoreo { get; set; }
        public virtual DbSet<MarcadoresMpz> MarcadoresMpz { get; set; }
    
        public virtual int Datos_co2_Create(Nullable<int> idSensor, Nullable<System.DateTime> fecha, Nullable<float> dato)
        {
            var idSensorParameter = idSensor.HasValue ?
                new ObjectParameter("idSensor", idSensor) :
                new ObjectParameter("idSensor", typeof(int));
    
            var fechaParameter = fecha.HasValue ?
                new ObjectParameter("fecha", fecha) :
                new ObjectParameter("fecha", typeof(System.DateTime));
    
            var datoParameter = dato.HasValue ?
                new ObjectParameter("dato", dato) :
                new ObjectParameter("dato", typeof(float));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Datos_co2_Create", idSensorParameter, fechaParameter, datoParameter);
        }
    
        public virtual ObjectResult<Datos_co2_Graphics_Result> Datos_co2_Graphics(Nullable<int> idSensor, Nullable<bool> precision, Nullable<int> datos, Nullable<System.DateTime> desde, Nullable<System.DateTime> hasta)
        {
            var idSensorParameter = idSensor.HasValue ?
                new ObjectParameter("idSensor", idSensor) :
                new ObjectParameter("idSensor", typeof(int));
    
            var precisionParameter = precision.HasValue ?
                new ObjectParameter("precision", precision) :
                new ObjectParameter("precision", typeof(bool));
    
            var datosParameter = datos.HasValue ?
                new ObjectParameter("datos", datos) :
                new ObjectParameter("datos", typeof(int));
    
            var desdeParameter = desde.HasValue ?
                new ObjectParameter("desde", desde) :
                new ObjectParameter("desde", typeof(System.DateTime));
    
            var hastaParameter = hasta.HasValue ?
                new ObjectParameter("hasta", hasta) :
                new ObjectParameter("hasta", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Datos_co2_Graphics_Result>("Datos_co2_Graphics", idSensorParameter, precisionParameter, datosParameter, desdeParameter, hastaParameter);
        }
    
        public virtual int Datos_energia_Create(Nullable<int> idSensor, Nullable<System.DateTime> fecha, Nullable<float> panelV, Nullable<float> panelC, Nullable<float> panelP, Nullable<float> charC, Nullable<float> charP, Nullable<float> charE, Nullable<float> charT, Nullable<float> batV, Nullable<float> batC, Nullable<float> batP, Nullable<float> batSOC, Nullable<float> batCE, Nullable<int> batTTG, Nullable<float> inv_inC, Nullable<float> inv_inP, Nullable<float> inv_outC, Nullable<float> inv_outP, Nullable<float> invE)
        {
            var idSensorParameter = idSensor.HasValue ?
                new ObjectParameter("idSensor", idSensor) :
                new ObjectParameter("idSensor", typeof(int));
    
            var fechaParameter = fecha.HasValue ?
                new ObjectParameter("fecha", fecha) :
                new ObjectParameter("fecha", typeof(System.DateTime));
    
            var panelVParameter = panelV.HasValue ?
                new ObjectParameter("panelV", panelV) :
                new ObjectParameter("panelV", typeof(float));
    
            var panelCParameter = panelC.HasValue ?
                new ObjectParameter("panelC", panelC) :
                new ObjectParameter("panelC", typeof(float));
    
            var panelPParameter = panelP.HasValue ?
                new ObjectParameter("panelP", panelP) :
                new ObjectParameter("panelP", typeof(float));
    
            var charCParameter = charC.HasValue ?
                new ObjectParameter("charC", charC) :
                new ObjectParameter("charC", typeof(float));
    
            var charPParameter = charP.HasValue ?
                new ObjectParameter("charP", charP) :
                new ObjectParameter("charP", typeof(float));
    
            var charEParameter = charE.HasValue ?
                new ObjectParameter("charE", charE) :
                new ObjectParameter("charE", typeof(float));
    
            var charTParameter = charT.HasValue ?
                new ObjectParameter("charT", charT) :
                new ObjectParameter("charT", typeof(float));
    
            var batVParameter = batV.HasValue ?
                new ObjectParameter("batV", batV) :
                new ObjectParameter("batV", typeof(float));
    
            var batCParameter = batC.HasValue ?
                new ObjectParameter("batC", batC) :
                new ObjectParameter("batC", typeof(float));
    
            var batPParameter = batP.HasValue ?
                new ObjectParameter("batP", batP) :
                new ObjectParameter("batP", typeof(float));
    
            var batSOCParameter = batSOC.HasValue ?
                new ObjectParameter("batSOC", batSOC) :
                new ObjectParameter("batSOC", typeof(float));
    
            var batCEParameter = batCE.HasValue ?
                new ObjectParameter("batCE", batCE) :
                new ObjectParameter("batCE", typeof(float));
    
            var batTTGParameter = batTTG.HasValue ?
                new ObjectParameter("batTTG", batTTG) :
                new ObjectParameter("batTTG", typeof(int));
    
            var inv_inCParameter = inv_inC.HasValue ?
                new ObjectParameter("inv_inC", inv_inC) :
                new ObjectParameter("inv_inC", typeof(float));
    
            var inv_inPParameter = inv_inP.HasValue ?
                new ObjectParameter("inv_inP", inv_inP) :
                new ObjectParameter("inv_inP", typeof(float));
    
            var inv_outCParameter = inv_outC.HasValue ?
                new ObjectParameter("inv_outC", inv_outC) :
                new ObjectParameter("inv_outC", typeof(float));
    
            var inv_outPParameter = inv_outP.HasValue ?
                new ObjectParameter("inv_outP", inv_outP) :
                new ObjectParameter("inv_outP", typeof(float));
    
            var invEParameter = invE.HasValue ?
                new ObjectParameter("invE", invE) :
                new ObjectParameter("invE", typeof(float));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Datos_energia_Create", idSensorParameter, fechaParameter, panelVParameter, panelCParameter, panelPParameter, charCParameter, charPParameter, charEParameter, charTParameter, batVParameter, batCParameter, batPParameter, batSOCParameter, batCEParameter, batTTGParameter, inv_inCParameter, inv_inPParameter, inv_outCParameter, inv_outPParameter, invEParameter);
        }
    
        public virtual ObjectResult<Datos_energia_GraphicsBat_Result> Datos_energia_GraphicsBat(Nullable<int> idSensor, Nullable<bool> precision, Nullable<int> datos, Nullable<System.DateTime> desde, Nullable<System.DateTime> hasta)
        {
            var idSensorParameter = idSensor.HasValue ?
                new ObjectParameter("idSensor", idSensor) :
                new ObjectParameter("idSensor", typeof(int));
    
            var precisionParameter = precision.HasValue ?
                new ObjectParameter("precision", precision) :
                new ObjectParameter("precision", typeof(bool));
    
            var datosParameter = datos.HasValue ?
                new ObjectParameter("datos", datos) :
                new ObjectParameter("datos", typeof(int));
    
            var desdeParameter = desde.HasValue ?
                new ObjectParameter("desde", desde) :
                new ObjectParameter("desde", typeof(System.DateTime));
    
            var hastaParameter = hasta.HasValue ?
                new ObjectParameter("hasta", hasta) :
                new ObjectParameter("hasta", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Datos_energia_GraphicsBat_Result>("Datos_energia_GraphicsBat", idSensorParameter, precisionParameter, datosParameter, desdeParameter, hastaParameter);
        }
    
        public virtual ObjectResult<Datos_energia_GraphicsChar_Result> Datos_energia_GraphicsChar(Nullable<int> idSensor, Nullable<bool> precision, Nullable<int> datos, Nullable<System.DateTime> desde, Nullable<System.DateTime> hasta)
        {
            var idSensorParameter = idSensor.HasValue ?
                new ObjectParameter("idSensor", idSensor) :
                new ObjectParameter("idSensor", typeof(int));
    
            var precisionParameter = precision.HasValue ?
                new ObjectParameter("precision", precision) :
                new ObjectParameter("precision", typeof(bool));
    
            var datosParameter = datos.HasValue ?
                new ObjectParameter("datos", datos) :
                new ObjectParameter("datos", typeof(int));
    
            var desdeParameter = desde.HasValue ?
                new ObjectParameter("desde", desde) :
                new ObjectParameter("desde", typeof(System.DateTime));
    
            var hastaParameter = hasta.HasValue ?
                new ObjectParameter("hasta", hasta) :
                new ObjectParameter("hasta", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Datos_energia_GraphicsChar_Result>("Datos_energia_GraphicsChar", idSensorParameter, precisionParameter, datosParameter, desdeParameter, hastaParameter);
        }
    
        public virtual ObjectResult<Datos_energia_GraphicsConsumo_Result> Datos_energia_GraphicsConsumo(Nullable<int> idSensor, Nullable<bool> precision, Nullable<int> datos, Nullable<System.DateTime> desde, Nullable<System.DateTime> hasta)
        {
            var idSensorParameter = idSensor.HasValue ?
                new ObjectParameter("idSensor", idSensor) :
                new ObjectParameter("idSensor", typeof(int));
    
            var precisionParameter = precision.HasValue ?
                new ObjectParameter("precision", precision) :
                new ObjectParameter("precision", typeof(bool));
    
            var datosParameter = datos.HasValue ?
                new ObjectParameter("datos", datos) :
                new ObjectParameter("datos", typeof(int));
    
            var desdeParameter = desde.HasValue ?
                new ObjectParameter("desde", desde) :
                new ObjectParameter("desde", typeof(System.DateTime));
    
            var hastaParameter = hasta.HasValue ?
                new ObjectParameter("hasta", hasta) :
                new ObjectParameter("hasta", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Datos_energia_GraphicsConsumo_Result>("Datos_energia_GraphicsConsumo", idSensorParameter, precisionParameter, datosParameter, desdeParameter, hastaParameter);
        }
    
        public virtual ObjectResult<Datos_energia_GraphicsInv_Result> Datos_energia_GraphicsInv(Nullable<int> idSensor, Nullable<bool> precision, Nullable<int> datos, Nullable<System.DateTime> desde, Nullable<System.DateTime> hasta)
        {
            var idSensorParameter = idSensor.HasValue ?
                new ObjectParameter("idSensor", idSensor) :
                new ObjectParameter("idSensor", typeof(int));
    
            var precisionParameter = precision.HasValue ?
                new ObjectParameter("precision", precision) :
                new ObjectParameter("precision", typeof(bool));
    
            var datosParameter = datos.HasValue ?
                new ObjectParameter("datos", datos) :
                new ObjectParameter("datos", typeof(int));
    
            var desdeParameter = desde.HasValue ?
                new ObjectParameter("desde", desde) :
                new ObjectParameter("desde", typeof(System.DateTime));
    
            var hastaParameter = hasta.HasValue ?
                new ObjectParameter("hasta", hasta) :
                new ObjectParameter("hasta", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Datos_energia_GraphicsInv_Result>("Datos_energia_GraphicsInv", idSensorParameter, precisionParameter, datosParameter, desdeParameter, hastaParameter);
        }
    
        public virtual int Datos_extensometro_Create(Nullable<int> idSensor, Nullable<System.DateTime> fecha, Nullable<float> dato)
        {
            var idSensorParameter = idSensor.HasValue ?
                new ObjectParameter("idSensor", idSensor) :
                new ObjectParameter("idSensor", typeof(int));
    
            var fechaParameter = fecha.HasValue ?
                new ObjectParameter("fecha", fecha) :
                new ObjectParameter("fecha", typeof(System.DateTime));
    
            var datoParameter = dato.HasValue ?
                new ObjectParameter("dato", dato) :
                new ObjectParameter("dato", typeof(float));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Datos_extensometro_Create", idSensorParameter, fechaParameter, datoParameter);
        }
    
        public virtual ObjectResult<Datos_extensometro_Graphics_Result> Datos_extensometro_Graphics(Nullable<int> idSensor, Nullable<bool> precision, Nullable<int> datos, Nullable<System.DateTime> desde, Nullable<System.DateTime> hasta)
        {
            var idSensorParameter = idSensor.HasValue ?
                new ObjectParameter("idSensor", idSensor) :
                new ObjectParameter("idSensor", typeof(int));
    
            var precisionParameter = precision.HasValue ?
                new ObjectParameter("precision", precision) :
                new ObjectParameter("precision", typeof(bool));
    
            var datosParameter = datos.HasValue ?
                new ObjectParameter("datos", datos) :
                new ObjectParameter("datos", typeof(int));
    
            var desdeParameter = desde.HasValue ?
                new ObjectParameter("desde", desde) :
                new ObjectParameter("desde", typeof(System.DateTime));
    
            var hastaParameter = hasta.HasValue ?
                new ObjectParameter("hasta", hasta) :
                new ObjectParameter("hasta", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Datos_extensometro_Graphics_Result>("Datos_extensometro_Graphics", idSensorParameter, precisionParameter, datosParameter, desdeParameter, hastaParameter);
        }
    
        public virtual int Datos_piezometro_Alertas(Nullable<int> idImagen, Nullable<int> idTipo, Nullable<System.DateTime> desde, Nullable<System.DateTime> hasta)
        {
            var idImagenParameter = idImagen.HasValue ?
                new ObjectParameter("idImagen", idImagen) :
                new ObjectParameter("idImagen", typeof(int));
    
            var idTipoParameter = idTipo.HasValue ?
                new ObjectParameter("idTipo", idTipo) :
                new ObjectParameter("idTipo", typeof(int));
    
            var desdeParameter = desde.HasValue ?
                new ObjectParameter("desde", desde) :
                new ObjectParameter("desde", typeof(System.DateTime));
    
            var hastaParameter = hasta.HasValue ?
                new ObjectParameter("hasta", hasta) :
                new ObjectParameter("hasta", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Datos_piezometro_Alertas", idImagenParameter, idTipoParameter, desdeParameter, hastaParameter);
        }
    
        public virtual int Datos_piezometro_AlertasDet(Nullable<int> idSensor, Nullable<System.DateTime> desde, Nullable<System.DateTime> hasta)
        {
            var idSensorParameter = idSensor.HasValue ?
                new ObjectParameter("idSensor", idSensor) :
                new ObjectParameter("idSensor", typeof(int));
    
            var desdeParameter = desde.HasValue ?
                new ObjectParameter("desde", desde) :
                new ObjectParameter("desde", typeof(System.DateTime));
    
            var hastaParameter = hasta.HasValue ?
                new ObjectParameter("hasta", hasta) :
                new ObjectParameter("hasta", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Datos_piezometro_AlertasDet", idSensorParameter, desdeParameter, hastaParameter);
        }
    
        public virtual int Datos_piezometro_Create(Nullable<int> idSensor, Nullable<System.DateTime> fecha, Nullable<float> cotaAgua, Nullable<float> metrosSensor, Nullable<float> temperatura_pz, Nullable<float> bUnits, Nullable<float> presion_pz, Nullable<float> temperatura_bmp, Nullable<float> presion_bmp)
        {
            var idSensorParameter = idSensor.HasValue ?
                new ObjectParameter("idSensor", idSensor) :
                new ObjectParameter("idSensor", typeof(int));
    
            var fechaParameter = fecha.HasValue ?
                new ObjectParameter("fecha", fecha) :
                new ObjectParameter("fecha", typeof(System.DateTime));
    
            var cotaAguaParameter = cotaAgua.HasValue ?
                new ObjectParameter("cotaAgua", cotaAgua) :
                new ObjectParameter("cotaAgua", typeof(float));
    
            var metrosSensorParameter = metrosSensor.HasValue ?
                new ObjectParameter("metrosSensor", metrosSensor) :
                new ObjectParameter("metrosSensor", typeof(float));
    
            var temperatura_pzParameter = temperatura_pz.HasValue ?
                new ObjectParameter("temperatura_pz", temperatura_pz) :
                new ObjectParameter("temperatura_pz", typeof(float));
    
            var bUnitsParameter = bUnits.HasValue ?
                new ObjectParameter("bUnits", bUnits) :
                new ObjectParameter("bUnits", typeof(float));
    
            var presion_pzParameter = presion_pz.HasValue ?
                new ObjectParameter("presion_pz", presion_pz) :
                new ObjectParameter("presion_pz", typeof(float));
    
            var temperatura_bmpParameter = temperatura_bmp.HasValue ?
                new ObjectParameter("temperatura_bmp", temperatura_bmp) :
                new ObjectParameter("temperatura_bmp", typeof(float));
    
            var presion_bmpParameter = presion_bmp.HasValue ?
                new ObjectParameter("presion_bmp", presion_bmp) :
                new ObjectParameter("presion_bmp", typeof(float));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Datos_piezometro_Create", idSensorParameter, fechaParameter, cotaAguaParameter, metrosSensorParameter, temperatura_pzParameter, bUnitsParameter, presion_pzParameter, temperatura_bmpParameter, presion_bmpParameter);
        }
    
        public virtual int Datos_piezometro_Graphics(Nullable<int> idSensor, Nullable<bool> precision, Nullable<int> datos, Nullable<System.DateTime> desde, Nullable<System.DateTime> hasta)
        {
            var idSensorParameter = idSensor.HasValue ?
                new ObjectParameter("idSensor", idSensor) :
                new ObjectParameter("idSensor", typeof(int));
    
            var precisionParameter = precision.HasValue ?
                new ObjectParameter("precision", precision) :
                new ObjectParameter("precision", typeof(bool));
    
            var datosParameter = datos.HasValue ?
                new ObjectParameter("datos", datos) :
                new ObjectParameter("datos", typeof(int));
    
            var desdeParameter = desde.HasValue ?
                new ObjectParameter("desde", desde) :
                new ObjectParameter("desde", typeof(System.DateTime));
    
            var hastaParameter = hasta.HasValue ?
                new ObjectParameter("hasta", hasta) :
                new ObjectParameter("hasta", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Datos_piezometro_Graphics", idSensorParameter, precisionParameter, datosParameter, desdeParameter, hastaParameter);
        }
    
        public virtual int Datos_pm10_Create(Nullable<int> idSensor, Nullable<System.DateTime> fecha, Nullable<float> dato)
        {
            var idSensorParameter = idSensor.HasValue ?
                new ObjectParameter("idSensor", idSensor) :
                new ObjectParameter("idSensor", typeof(int));
    
            var fechaParameter = fecha.HasValue ?
                new ObjectParameter("fecha", fecha) :
                new ObjectParameter("fecha", typeof(System.DateTime));
    
            var datoParameter = dato.HasValue ?
                new ObjectParameter("dato", dato) :
                new ObjectParameter("dato", typeof(float));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Datos_pm10_Create", idSensorParameter, fechaParameter, datoParameter);
        }
    
        public virtual ObjectResult<Datos_pm10_Graphics_Result> Datos_pm10_Graphics(Nullable<int> idSensor, Nullable<int> multipler, Nullable<int> datos)
        {
            var idSensorParameter = idSensor.HasValue ?
                new ObjectParameter("idSensor", idSensor) :
                new ObjectParameter("idSensor", typeof(int));
    
            var multiplerParameter = multipler.HasValue ?
                new ObjectParameter("multipler", multipler) :
                new ObjectParameter("multipler", typeof(int));
    
            var datosParameter = datos.HasValue ?
                new ObjectParameter("datos", datos) :
                new ObjectParameter("datos", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Datos_pm10_Graphics_Result>("Datos_pm10_Graphics", idSensorParameter, multiplerParameter, datosParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> Figuras_Create(Nullable<short> tipo, string nombre, Nullable<short> size, string color, Nullable<short> borde, string colorBorde, Nullable<short> rotacion)
        {
            var tipoParameter = tipo.HasValue ?
                new ObjectParameter("tipo", tipo) :
                new ObjectParameter("tipo", typeof(short));
    
            var nombreParameter = nombre != null ?
                new ObjectParameter("nombre", nombre) :
                new ObjectParameter("nombre", typeof(string));
    
            var sizeParameter = size.HasValue ?
                new ObjectParameter("size", size) :
                new ObjectParameter("size", typeof(short));
    
            var colorParameter = color != null ?
                new ObjectParameter("color", color) :
                new ObjectParameter("color", typeof(string));
    
            var bordeParameter = borde.HasValue ?
                new ObjectParameter("borde", borde) :
                new ObjectParameter("borde", typeof(short));
    
            var colorBordeParameter = colorBorde != null ?
                new ObjectParameter("colorBorde", colorBorde) :
                new ObjectParameter("colorBorde", typeof(string));
    
            var rotacionParameter = rotacion.HasValue ?
                new ObjectParameter("rotacion", rotacion) :
                new ObjectParameter("rotacion", typeof(short));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("Figuras_Create", tipoParameter, nombreParameter, sizeParameter, colorParameter, bordeParameter, colorBordeParameter, rotacionParameter);
        }
    
        public virtual int Figuras_Update(Nullable<int> idFigura, Nullable<short> tipo, string nombre, Nullable<short> size, string color, Nullable<short> borde, string colorBorde, Nullable<short> rotacion)
        {
            var idFiguraParameter = idFigura.HasValue ?
                new ObjectParameter("idFigura", idFigura) :
                new ObjectParameter("idFigura", typeof(int));
    
            var tipoParameter = tipo.HasValue ?
                new ObjectParameter("tipo", tipo) :
                new ObjectParameter("tipo", typeof(short));
    
            var nombreParameter = nombre != null ?
                new ObjectParameter("nombre", nombre) :
                new ObjectParameter("nombre", typeof(string));
    
            var sizeParameter = size.HasValue ?
                new ObjectParameter("size", size) :
                new ObjectParameter("size", typeof(short));
    
            var colorParameter = color != null ?
                new ObjectParameter("color", color) :
                new ObjectParameter("color", typeof(string));
    
            var bordeParameter = borde.HasValue ?
                new ObjectParameter("borde", borde) :
                new ObjectParameter("borde", typeof(short));
    
            var colorBordeParameter = colorBorde != null ?
                new ObjectParameter("colorBorde", colorBorde) :
                new ObjectParameter("colorBorde", typeof(string));
    
            var rotacionParameter = rotacion.HasValue ?
                new ObjectParameter("rotacion", rotacion) :
                new ObjectParameter("rotacion", typeof(short));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Figuras_Update", idFiguraParameter, tipoParameter, nombreParameter, sizeParameter, colorParameter, bordeParameter, colorBordeParameter, rotacionParameter);
        }
    
        public virtual int Imagen_TipoSensor_Create(Nullable<int> idImagen, Nullable<int> idTipo)
        {
            var idImagenParameter = idImagen.HasValue ?
                new ObjectParameter("idImagen", idImagen) :
                new ObjectParameter("idImagen", typeof(int));
    
            var idTipoParameter = idTipo.HasValue ?
                new ObjectParameter("idTipo", idTipo) :
                new ObjectParameter("idTipo", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Imagen_TipoSensor_Create", idImagenParameter, idTipoParameter);
        }
    
        public virtual int Imagen_TipoSensor_Delete(Nullable<int> idImagen, Nullable<int> idTipo)
        {
            var idImagenParameter = idImagen.HasValue ?
                new ObjectParameter("idImagen", idImagen) :
                new ObjectParameter("idImagen", typeof(int));
    
            var idTipoParameter = idTipo.HasValue ?
                new ObjectParameter("idTipo", idTipo) :
                new ObjectParameter("idTipo", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Imagen_TipoSensor_Delete", idImagenParameter, idTipoParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> Imagenes_Create(string nombre)
        {
            var nombreParameter = nombre != null ?
                new ObjectParameter("nombre", nombre) :
                new ObjectParameter("nombre", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("Imagenes_Create", nombreParameter);
        }
    
        public virtual int Imagenes_Georeferenciar(Nullable<int> idImagen, Nullable<double> mx, Nullable<double> nx, Nullable<double> my, Nullable<double> ny)
        {
            var idImagenParameter = idImagen.HasValue ?
                new ObjectParameter("idImagen", idImagen) :
                new ObjectParameter("idImagen", typeof(int));
    
            var mxParameter = mx.HasValue ?
                new ObjectParameter("mx", mx) :
                new ObjectParameter("mx", typeof(double));
    
            var nxParameter = nx.HasValue ?
                new ObjectParameter("nx", nx) :
                new ObjectParameter("nx", typeof(double));
    
            var myParameter = my.HasValue ?
                new ObjectParameter("my", my) :
                new ObjectParameter("my", typeof(double));
    
            var nyParameter = ny.HasValue ?
                new ObjectParameter("ny", ny) :
                new ObjectParameter("ny", typeof(double));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Imagenes_Georeferenciar", idImagenParameter, mxParameter, nxParameter, myParameter, nyParameter);
        }
    
        public virtual int Imagenes_Update(Nullable<int> idImagen, string nombre)
        {
            var idImagenParameter = idImagen.HasValue ?
                new ObjectParameter("idImagen", idImagen) :
                new ObjectParameter("idImagen", typeof(int));
    
            var nombreParameter = nombre != null ?
                new ObjectParameter("nombre", nombre) :
                new ObjectParameter("nombre", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Imagenes_Update", idImagenParameter, nombreParameter);
        }
    
        public virtual int Marcadores_Create(Nullable<int> idSensor, Nullable<int> idImagen, Nullable<short> x, Nullable<short> y)
        {
            var idSensorParameter = idSensor.HasValue ?
                new ObjectParameter("idSensor", idSensor) :
                new ObjectParameter("idSensor", typeof(int));
    
            var idImagenParameter = idImagen.HasValue ?
                new ObjectParameter("idImagen", idImagen) :
                new ObjectParameter("idImagen", typeof(int));
    
            var xParameter = x.HasValue ?
                new ObjectParameter("x", x) :
                new ObjectParameter("x", typeof(short));
    
            var yParameter = y.HasValue ?
                new ObjectParameter("y", y) :
                new ObjectParameter("y", typeof(short));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Marcadores_Create", idSensorParameter, idImagenParameter, xParameter, yParameter);
        }
    
        public virtual int Marcadores_Delete(Nullable<int> idSensor)
        {
            var idSensorParameter = idSensor.HasValue ?
                new ObjectParameter("idSensor", idSensor) :
                new ObjectParameter("idSensor", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Marcadores_Delete", idSensorParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> Sensores_Create(Nullable<int> idTipo, Nullable<int> idFigura, Nullable<int> idPuntoMonitoreo, string nombre, Nullable<float> maxLimit, Nullable<float> minLimit)
        {
            var idTipoParameter = idTipo.HasValue ?
                new ObjectParameter("idTipo", idTipo) :
                new ObjectParameter("idTipo", typeof(int));
    
            var idFiguraParameter = idFigura.HasValue ?
                new ObjectParameter("idFigura", idFigura) :
                new ObjectParameter("idFigura", typeof(int));
    
            var idPuntoMonitoreoParameter = idPuntoMonitoreo.HasValue ?
                new ObjectParameter("idPuntoMonitoreo", idPuntoMonitoreo) :
                new ObjectParameter("idPuntoMonitoreo", typeof(int));
    
            var nombreParameter = nombre != null ?
                new ObjectParameter("nombre", nombre) :
                new ObjectParameter("nombre", typeof(string));
    
            var maxLimitParameter = maxLimit.HasValue ?
                new ObjectParameter("maxLimit", maxLimit) :
                new ObjectParameter("maxLimit", typeof(float));
    
            var minLimitParameter = minLimit.HasValue ?
                new ObjectParameter("minLimit", minLimit) :
                new ObjectParameter("minLimit", typeof(float));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("Sensores_Create", idTipoParameter, idFiguraParameter, idPuntoMonitoreoParameter, nombreParameter, maxLimitParameter, minLimitParameter);
        }
    
        public virtual int Sensores_Update(Nullable<int> idSensor, Nullable<int> idFigura, Nullable<int> idPuntoMonitoreo, string nombre, Nullable<float> maxLimit, Nullable<float> minLimit)
        {
            var idSensorParameter = idSensor.HasValue ?
                new ObjectParameter("idSensor", idSensor) :
                new ObjectParameter("idSensor", typeof(int));
    
            var idFiguraParameter = idFigura.HasValue ?
                new ObjectParameter("idFigura", idFigura) :
                new ObjectParameter("idFigura", typeof(int));
    
            var idPuntoMonitoreoParameter = idPuntoMonitoreo.HasValue ?
                new ObjectParameter("idPuntoMonitoreo", idPuntoMonitoreo) :
                new ObjectParameter("idPuntoMonitoreo", typeof(int));
    
            var nombreParameter = nombre != null ?
                new ObjectParameter("nombre", nombre) :
                new ObjectParameter("nombre", typeof(string));
    
            var maxLimitParameter = maxLimit.HasValue ?
                new ObjectParameter("maxLimit", maxLimit) :
                new ObjectParameter("maxLimit", typeof(float));
    
            var minLimitParameter = minLimit.HasValue ?
                new ObjectParameter("minLimit", minLimit) :
                new ObjectParameter("minLimit", typeof(float));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Sensores_Update", idSensorParameter, idFiguraParameter, idPuntoMonitoreoParameter, nombreParameter, maxLimitParameter, minLimitParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> SensoresPiezometros_Create(Nullable<int> idTipo, Nullable<int> idFigura, Nullable<int> idPuntoMonitoreo, string nombre, Nullable<float> maxLimit, Nullable<float> minLimit, string seriePiezo, Nullable<float> profundidadPozo, Nullable<float> cotaTierra, Nullable<float> distT_A, Nullable<float> cotaAgua, Nullable<float> cotaSensor, Nullable<float> metrosSensor, Nullable<float> carpeta, Nullable<float> coefA, Nullable<float> coefB, Nullable<float> coefC, Nullable<float> tempK, Nullable<float> tempI, Nullable<float> baroI, Nullable<int> freqRead, Nullable<int> freqSend)
        {
            var idTipoParameter = idTipo.HasValue ?
                new ObjectParameter("idTipo", idTipo) :
                new ObjectParameter("idTipo", typeof(int));
    
            var idFiguraParameter = idFigura.HasValue ?
                new ObjectParameter("idFigura", idFigura) :
                new ObjectParameter("idFigura", typeof(int));
    
            var idPuntoMonitoreoParameter = idPuntoMonitoreo.HasValue ?
                new ObjectParameter("idPuntoMonitoreo", idPuntoMonitoreo) :
                new ObjectParameter("idPuntoMonitoreo", typeof(int));
    
            var nombreParameter = nombre != null ?
                new ObjectParameter("nombre", nombre) :
                new ObjectParameter("nombre", typeof(string));
    
            var maxLimitParameter = maxLimit.HasValue ?
                new ObjectParameter("maxLimit", maxLimit) :
                new ObjectParameter("maxLimit", typeof(float));
    
            var minLimitParameter = minLimit.HasValue ?
                new ObjectParameter("minLimit", minLimit) :
                new ObjectParameter("minLimit", typeof(float));
    
            var seriePiezoParameter = seriePiezo != null ?
                new ObjectParameter("seriePiezo", seriePiezo) :
                new ObjectParameter("seriePiezo", typeof(string));
    
            var profundidadPozoParameter = profundidadPozo.HasValue ?
                new ObjectParameter("profundidadPozo", profundidadPozo) :
                new ObjectParameter("profundidadPozo", typeof(float));
    
            var cotaTierraParameter = cotaTierra.HasValue ?
                new ObjectParameter("cotaTierra", cotaTierra) :
                new ObjectParameter("cotaTierra", typeof(float));
    
            var distT_AParameter = distT_A.HasValue ?
                new ObjectParameter("distT_A", distT_A) :
                new ObjectParameter("distT_A", typeof(float));
    
            var cotaAguaParameter = cotaAgua.HasValue ?
                new ObjectParameter("cotaAgua", cotaAgua) :
                new ObjectParameter("cotaAgua", typeof(float));
    
            var cotaSensorParameter = cotaSensor.HasValue ?
                new ObjectParameter("cotaSensor", cotaSensor) :
                new ObjectParameter("cotaSensor", typeof(float));
    
            var metrosSensorParameter = metrosSensor.HasValue ?
                new ObjectParameter("metrosSensor", metrosSensor) :
                new ObjectParameter("metrosSensor", typeof(float));
    
            var carpetaParameter = carpeta.HasValue ?
                new ObjectParameter("carpeta", carpeta) :
                new ObjectParameter("carpeta", typeof(float));
    
            var coefAParameter = coefA.HasValue ?
                new ObjectParameter("coefA", coefA) :
                new ObjectParameter("coefA", typeof(float));
    
            var coefBParameter = coefB.HasValue ?
                new ObjectParameter("coefB", coefB) :
                new ObjectParameter("coefB", typeof(float));
    
            var coefCParameter = coefC.HasValue ?
                new ObjectParameter("coefC", coefC) :
                new ObjectParameter("coefC", typeof(float));
    
            var tempKParameter = tempK.HasValue ?
                new ObjectParameter("tempK", tempK) :
                new ObjectParameter("tempK", typeof(float));
    
            var tempIParameter = tempI.HasValue ?
                new ObjectParameter("tempI", tempI) :
                new ObjectParameter("tempI", typeof(float));
    
            var baroIParameter = baroI.HasValue ?
                new ObjectParameter("baroI", baroI) :
                new ObjectParameter("baroI", typeof(float));
    
            var freqReadParameter = freqRead.HasValue ?
                new ObjectParameter("freqRead", freqRead) :
                new ObjectParameter("freqRead", typeof(int));
    
            var freqSendParameter = freqSend.HasValue ?
                new ObjectParameter("freqSend", freqSend) :
                new ObjectParameter("freqSend", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("SensoresPiezometros_Create", idTipoParameter, idFiguraParameter, idPuntoMonitoreoParameter, nombreParameter, maxLimitParameter, minLimitParameter, seriePiezoParameter, profundidadPozoParameter, cotaTierraParameter, distT_AParameter, cotaAguaParameter, cotaSensorParameter, metrosSensorParameter, carpetaParameter, coefAParameter, coefBParameter, coefCParameter, tempKParameter, tempIParameter, baroIParameter, freqReadParameter, freqSendParameter);
        }
    
        public virtual ObjectResult<Datos_piezometro_Range_Result> Datos_piezometro_Range(Nullable<int> idSensor, Nullable<System.DateTime> desde, Nullable<System.DateTime> hasta)
        {
            var idSensorParameter = idSensor.HasValue ?
                new ObjectParameter("idSensor", idSensor) :
                new ObjectParameter("idSensor", typeof(int));
    
            var desdeParameter = desde.HasValue ?
                new ObjectParameter("desde", desde) :
                new ObjectParameter("desde", typeof(System.DateTime));
    
            var hastaParameter = hasta.HasValue ?
                new ObjectParameter("hasta", hasta) :
                new ObjectParameter("hasta", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Datos_piezometro_Range_Result>("Datos_piezometro_Range", idSensorParameter, desdeParameter, hastaParameter);
        }
    
        public virtual int SensoresPiezometros_Update(Nullable<int> idSensor, Nullable<int> idFigura, string nombre, Nullable<float> maxLimit, Nullable<float> minLimit, string seriePiezo, Nullable<float> profundidadPozo, Nullable<float> cotaTierra, Nullable<float> distT_A, Nullable<float> cotaAgua, Nullable<float> cotaSensor, Nullable<float> metrosSensor, Nullable<float> carpeta, Nullable<float> coefA, Nullable<float> coefB, Nullable<float> coefC, Nullable<float> tempK, Nullable<float> tempI, Nullable<float> baroI, Nullable<int> freqRead, Nullable<int> freqSend)
        {
            var idSensorParameter = idSensor.HasValue ?
                new ObjectParameter("idSensor", idSensor) :
                new ObjectParameter("idSensor", typeof(int));
    
            var idFiguraParameter = idFigura.HasValue ?
                new ObjectParameter("idFigura", idFigura) :
                new ObjectParameter("idFigura", typeof(int));
    
            var nombreParameter = nombre != null ?
                new ObjectParameter("nombre", nombre) :
                new ObjectParameter("nombre", typeof(string));
    
            var maxLimitParameter = maxLimit.HasValue ?
                new ObjectParameter("maxLimit", maxLimit) :
                new ObjectParameter("maxLimit", typeof(float));
    
            var minLimitParameter = minLimit.HasValue ?
                new ObjectParameter("minLimit", minLimit) :
                new ObjectParameter("minLimit", typeof(float));
    
            var seriePiezoParameter = seriePiezo != null ?
                new ObjectParameter("seriePiezo", seriePiezo) :
                new ObjectParameter("seriePiezo", typeof(string));
    
            var profundidadPozoParameter = profundidadPozo.HasValue ?
                new ObjectParameter("profundidadPozo", profundidadPozo) :
                new ObjectParameter("profundidadPozo", typeof(float));
    
            var cotaTierraParameter = cotaTierra.HasValue ?
                new ObjectParameter("cotaTierra", cotaTierra) :
                new ObjectParameter("cotaTierra", typeof(float));
    
            var distT_AParameter = distT_A.HasValue ?
                new ObjectParameter("distT_A", distT_A) :
                new ObjectParameter("distT_A", typeof(float));
    
            var cotaAguaParameter = cotaAgua.HasValue ?
                new ObjectParameter("cotaAgua", cotaAgua) :
                new ObjectParameter("cotaAgua", typeof(float));
    
            var cotaSensorParameter = cotaSensor.HasValue ?
                new ObjectParameter("cotaSensor", cotaSensor) :
                new ObjectParameter("cotaSensor", typeof(float));
    
            var metrosSensorParameter = metrosSensor.HasValue ?
                new ObjectParameter("metrosSensor", metrosSensor) :
                new ObjectParameter("metrosSensor", typeof(float));
    
            var carpetaParameter = carpeta.HasValue ?
                new ObjectParameter("carpeta", carpeta) :
                new ObjectParameter("carpeta", typeof(float));
    
            var coefAParameter = coefA.HasValue ?
                new ObjectParameter("coefA", coefA) :
                new ObjectParameter("coefA", typeof(float));
    
            var coefBParameter = coefB.HasValue ?
                new ObjectParameter("coefB", coefB) :
                new ObjectParameter("coefB", typeof(float));
    
            var coefCParameter = coefC.HasValue ?
                new ObjectParameter("coefC", coefC) :
                new ObjectParameter("coefC", typeof(float));
    
            var tempKParameter = tempK.HasValue ?
                new ObjectParameter("tempK", tempK) :
                new ObjectParameter("tempK", typeof(float));
    
            var tempIParameter = tempI.HasValue ?
                new ObjectParameter("tempI", tempI) :
                new ObjectParameter("tempI", typeof(float));
    
            var baroIParameter = baroI.HasValue ?
                new ObjectParameter("baroI", baroI) :
                new ObjectParameter("baroI", typeof(float));
    
            var freqReadParameter = freqRead.HasValue ?
                new ObjectParameter("freqRead", freqRead) :
                new ObjectParameter("freqRead", typeof(int));
    
            var freqSendParameter = freqSend.HasValue ?
                new ObjectParameter("freqSend", freqSend) :
                new ObjectParameter("freqSend", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SensoresPiezometros_Update", idSensorParameter, idFiguraParameter, nombreParameter, maxLimitParameter, minLimitParameter, seriePiezoParameter, profundidadPozoParameter, cotaTierraParameter, distT_AParameter, cotaAguaParameter, cotaSensorParameter, metrosSensorParameter, carpetaParameter, coefAParameter, coefBParameter, coefCParameter, tempKParameter, tempIParameter, baroIParameter, freqReadParameter, freqSendParameter);
        }
    
        public virtual int Identity_UserRoles_Create(Nullable<int> idRol, Nullable<int> idUsuario)
        {
            var idRolParameter = idRol.HasValue ?
                new ObjectParameter("idRol", idRol) :
                new ObjectParameter("idRol", typeof(int));
    
            var idUsuarioParameter = idUsuario.HasValue ?
                new ObjectParameter("idUsuario", idUsuario) :
                new ObjectParameter("idUsuario", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Identity_UserRoles_Create", idRolParameter, idUsuarioParameter);
        }
    
        public virtual int Identity_UserRoles_Delete(Nullable<int> idRol, Nullable<int> idUsuario)
        {
            var idRolParameter = idRol.HasValue ?
                new ObjectParameter("idRol", idRol) :
                new ObjectParameter("idRol", typeof(int));
    
            var idUsuarioParameter = idUsuario.HasValue ?
                new ObjectParameter("idUsuario", idUsuario) :
                new ObjectParameter("idUsuario", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Identity_UserRoles_Delete", idRolParameter, idUsuarioParameter);
        }
    
        public virtual int Identity_Users_Update(Nullable<int> idUsuario, string email, string userName, string fullName)
        {
            var idUsuarioParameter = idUsuario.HasValue ?
                new ObjectParameter("idUsuario", idUsuario) :
                new ObjectParameter("idUsuario", typeof(int));
    
            var emailParameter = email != null ?
                new ObjectParameter("email", email) :
                new ObjectParameter("email", typeof(string));
    
            var userNameParameter = userName != null ?
                new ObjectParameter("userName", userName) :
                new ObjectParameter("userName", typeof(string));
    
            var fullNameParameter = fullName != null ?
                new ObjectParameter("fullName", fullName) :
                new ObjectParameter("fullName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Identity_Users_Update", idUsuarioParameter, emailParameter, userNameParameter, fullNameParameter);
        }
    
        public virtual ObjectResult<Datos_extensometro_Alertas_Result> Datos_extensometro_Alertas(Nullable<int> idImagen, Nullable<int> idTipo, Nullable<System.DateTime> desde, Nullable<System.DateTime> hasta)
        {
            var idImagenParameter = idImagen.HasValue ?
                new ObjectParameter("idImagen", idImagen) :
                new ObjectParameter("idImagen", typeof(int));
    
            var idTipoParameter = idTipo.HasValue ?
                new ObjectParameter("idTipo", idTipo) :
                new ObjectParameter("idTipo", typeof(int));
    
            var desdeParameter = desde.HasValue ?
                new ObjectParameter("desde", desde) :
                new ObjectParameter("desde", typeof(System.DateTime));
    
            var hastaParameter = hasta.HasValue ?
                new ObjectParameter("hasta", hasta) :
                new ObjectParameter("hasta", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Datos_extensometro_Alertas_Result>("Datos_extensometro_Alertas", idImagenParameter, idTipoParameter, desdeParameter, hastaParameter);
        }
    
        public virtual ObjectResult<Datos_extensometro_AlertasDet_Result> Datos_extensometro_AlertasDet(Nullable<int> idSensor, Nullable<System.DateTime> desde, Nullable<System.DateTime> hasta)
        {
            var idSensorParameter = idSensor.HasValue ?
                new ObjectParameter("idSensor", idSensor) :
                new ObjectParameter("idSensor", typeof(int));
    
            var desdeParameter = desde.HasValue ?
                new ObjectParameter("desde", desde) :
                new ObjectParameter("desde", typeof(System.DateTime));
    
            var hastaParameter = hasta.HasValue ?
                new ObjectParameter("hasta", hasta) :
                new ObjectParameter("hasta", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Datos_extensometro_AlertasDet_Result>("Datos_extensometro_AlertasDet", idSensorParameter, desdeParameter, hastaParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> Datos_piezometro_Corregir(Nullable<int> idSensor, Nullable<System.DateTime> desde, Nullable<System.DateTime> hasta, Nullable<float> cotaSensor, Nullable<float> coefA, Nullable<float> coefB, Nullable<float> coefC, Nullable<float> tempK, Nullable<float> tempI, Nullable<float> baroI, Nullable<float> metrosSensor)
        {
            var idSensorParameter = idSensor.HasValue ?
                new ObjectParameter("idSensor", idSensor) :
                new ObjectParameter("idSensor", typeof(int));
    
            var desdeParameter = desde.HasValue ?
                new ObjectParameter("desde", desde) :
                new ObjectParameter("desde", typeof(System.DateTime));
    
            var hastaParameter = hasta.HasValue ?
                new ObjectParameter("hasta", hasta) :
                new ObjectParameter("hasta", typeof(System.DateTime));
    
            var cotaSensorParameter = cotaSensor.HasValue ?
                new ObjectParameter("cotaSensor", cotaSensor) :
                new ObjectParameter("cotaSensor", typeof(float));
    
            var coefAParameter = coefA.HasValue ?
                new ObjectParameter("coefA", coefA) :
                new ObjectParameter("coefA", typeof(float));
    
            var coefBParameter = coefB.HasValue ?
                new ObjectParameter("coefB", coefB) :
                new ObjectParameter("coefB", typeof(float));
    
            var coefCParameter = coefC.HasValue ?
                new ObjectParameter("coefC", coefC) :
                new ObjectParameter("coefC", typeof(float));
    
            var tempKParameter = tempK.HasValue ?
                new ObjectParameter("tempK", tempK) :
                new ObjectParameter("tempK", typeof(float));
    
            var tempIParameter = tempI.HasValue ?
                new ObjectParameter("tempI", tempI) :
                new ObjectParameter("tempI", typeof(float));
    
            var baroIParameter = baroI.HasValue ?
                new ObjectParameter("baroI", baroI) :
                new ObjectParameter("baroI", typeof(float));
    
            var metrosSensorParameter = metrosSensor.HasValue ?
                new ObjectParameter("metrosSensor", metrosSensor) :
                new ObjectParameter("metrosSensor", typeof(float));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("Datos_piezometro_Corregir", idSensorParameter, desdeParameter, hastaParameter, cotaSensorParameter, coefAParameter, coefBParameter, coefCParameter, tempKParameter, tempIParameter, baroIParameter, metrosSensorParameter);
        }
    
        public virtual ObjectResult<PuntoMonitoreo_Create_Result> PuntoMonitoreo_Create(Nullable<int> idFigura, string nombre, Nullable<float> carpeta, Nullable<float> cotaTierra)
        {
            var idFiguraParameter = idFigura.HasValue ?
                new ObjectParameter("idFigura", idFigura) :
                new ObjectParameter("idFigura", typeof(int));
    
            var nombreParameter = nombre != null ?
                new ObjectParameter("nombre", nombre) :
                new ObjectParameter("nombre", typeof(string));
    
            var carpetaParameter = carpeta.HasValue ?
                new ObjectParameter("carpeta", carpeta) :
                new ObjectParameter("carpeta", typeof(float));
    
            var cotaTierraParameter = cotaTierra.HasValue ?
                new ObjectParameter("cotaTierra", cotaTierra) :
                new ObjectParameter("cotaTierra", typeof(float));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<PuntoMonitoreo_Create_Result>("PuntoMonitoreo_Create", idFiguraParameter, nombreParameter, carpetaParameter, cotaTierraParameter);
        }
    
        public virtual int PuntoMonitoreo_Update(Nullable<int> idPuntoMonitoreo, Nullable<int> idFigura, string nombre, Nullable<float> carpeta, Nullable<float> cotaTierra)
        {
            var idPuntoMonitoreoParameter = idPuntoMonitoreo.HasValue ?
                new ObjectParameter("idPuntoMonitoreo", idPuntoMonitoreo) :
                new ObjectParameter("idPuntoMonitoreo", typeof(int));
    
            var idFiguraParameter = idFigura.HasValue ?
                new ObjectParameter("idFigura", idFigura) :
                new ObjectParameter("idFigura", typeof(int));
    
            var nombreParameter = nombre != null ?
                new ObjectParameter("nombre", nombre) :
                new ObjectParameter("nombre", typeof(string));
    
            var carpetaParameter = carpeta.HasValue ?
                new ObjectParameter("carpeta", carpeta) :
                new ObjectParameter("carpeta", typeof(float));
    
            var cotaTierraParameter = cotaTierra.HasValue ?
                new ObjectParameter("cotaTierra", cotaTierra) :
                new ObjectParameter("cotaTierra", typeof(float));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("PuntoMonitoreo_Update", idPuntoMonitoreoParameter, idFiguraParameter, nombreParameter, carpetaParameter, cotaTierraParameter);
        }
    
        public virtual int MarcadoresMpz_Create(Nullable<int> idPuntoMonitoreo, Nullable<int> idImagen, Nullable<short> x, Nullable<short> y)
        {
            var idPuntoMonitoreoParameter = idPuntoMonitoreo.HasValue ?
                new ObjectParameter("idPuntoMonitoreo", idPuntoMonitoreo) :
                new ObjectParameter("idPuntoMonitoreo", typeof(int));
    
            var idImagenParameter = idImagen.HasValue ?
                new ObjectParameter("idImagen", idImagen) :
                new ObjectParameter("idImagen", typeof(int));
    
            var xParameter = x.HasValue ?
                new ObjectParameter("x", x) :
                new ObjectParameter("x", typeof(short));
    
            var yParameter = y.HasValue ?
                new ObjectParameter("y", y) :
                new ObjectParameter("y", typeof(short));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("MarcadoresMpz_Create", idPuntoMonitoreoParameter, idImagenParameter, xParameter, yParameter);
        }
    
        public virtual int MarcadoresMpz_Delete(Nullable<int> idPuntoMonitoreo)
        {
            var idPuntoMonitoreoParameter = idPuntoMonitoreo.HasValue ?
                new ObjectParameter("idPuntoMonitoreo", idPuntoMonitoreo) :
                new ObjectParameter("idPuntoMonitoreo", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("MarcadoresMpz_Delete", idPuntoMonitoreoParameter);
        }
    }
}
